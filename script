import scipy.optimize._minimize
import math
import matplotlib.pyplot as plt 


def make_fig():
    #
    # Creating figure
    fig = plt.figure(
        figsize=(5, 4.2),
        facecolor='#ffffff',
        tight_layout=True)
    # Adding and configuring axes
    ax = fig.add_subplot(
        facecolor='#ffffff',
        )
    ax.grid(
    linestyle=':',
    )
    # Returning axes handle
    return ax


def lengths( points, x3, y3): #calculates the lengths of each of the 3 arms 
    lengthArr = []
    lengthArr.append( math.sqrt( ( points[0]**2 ) + (points[1]**2 ) ) )
    lengthArr.append( math.sqrt( ( points[2]- points[0] ) **2 + ( points[3] - points[1] ) **2 ) )
    lengthArr.append( math.sqrt( ( x3 - points[2] )**2 + ( y3 - points[3] )**2 ) )
    return lengthArr

def mass( p, l ): #calculates mass of each arm based on length and its density
    return p * l

def force( aMass ): #calculates force using mass and gravity constant (9.81N/kG)
    return aMass * 9.81

def midpoints( positions, x3, y3 ): #calculates the x-y coords of the midpoint of each arm because that's where the force is applied
    midpointArr = [ [], [], [] ]

    midpointArr[0].append( positions[0]/2 ) 
    midpointArr[0].append( positions[1]/2 )

    midpointArr[1].append( ( positions[2]-positions[0] )/2 + positions[0] )
    midpointArr[1].append( ( positions[3]-positions[1] )/2 + positions[1] )

    midpointArr[2].append( ( x3 - positions[2] )/2 + positions[2] )
    midpointArr[2].append( ( y3 - positions[3] )/2 + positions[3] )

    return midpointArr


def torqueCalculator( positions ):

    posArray = [ 0, 0, 0 ]

    x3 = 0.75
    y3 = 0.1

    posArray[0] = positions[0]
    posArray[1] = positions[1]
    posArray[2] = positions[2]

    posArray.append( y3 - ( math.tan( -math.pi/3.0 ) * ( x3 - positions[2] ) ) )
    
    lengthArr = lengths(posArray, x3, y3) #create new array and all lengths to it

    masses = [] #add all masses to an array. density of the three arms are 4,2,1 hence the a /= 2
    a = 4
    for i in range( 0, 3):
        masses.append( mass( a, lengthArr[i] ) )
        a /= 2
    
    forces=[] #using masses calculate the force applied at each of the midpoints
    for i in range( 0, 3 ):
        forces.append( force(masses[i]) )
    forces.append( force(5) )

    midpointArr = midpoints( posArray, x3, y3 ) #populate array with x and y coords of midpoints

    torque = 0

    for i in range( 0, 3): #Add all the torque required for the three arms
        torque += ( forces[i] * midpointArr[i][0] * math.sin( math.atan2( midpointArr[i][1], midpointArr[i][0] ) ) )

    torque += forces[3] * x3 * math.sin( math.atan2( y3, x3 ) ) #need to add the torque from the 5kg mass at the end of the arm

    # make_fig()
    # xPoints = [ 0, posArray[0], posArray[2], x3 ]
    # yPoints = [ 0, posArray[1], posArray[3], y3 ]
    # # print(xPoints)
    # # print(yPoints)
    # plt.scatter(xPoints, yPoints)
    # plt.show()
    totalLength = lengthArr[0] + lengthArr[1] + lengthArr[2]
    print("Length below")
    print( totalLength)
    print( torque )
    print( posArray )
    return math.fabs(torque)


x0 = [ -0.5, 0.5, 0.5 ]


res = scipy.optimize.minimize(torqueCalculator, x0, method="Nelder-Mead")
print(res)

xPoints = [ 0, -0.5478141373939869, 0.45005787240316486, 0.75]
yPoints = [ 0, 0.5322259412463479, 0.6195150043280253, 0.1]

plt.scatter(xPoints, yPoints)
plt.plot(xPoints,yPoints)
plt.show()